import os
import re

from config import BOT_TOKEN
import datetime
import telebot
from telebot import types
from repository import EventManager, EventModel, statistic
from graphics import get_eat_graphic
from Classes.AnswerStrategy import *

PIN_MSG_EAT = None

bot = telebot.TeleBot(BOT_TOKEN)


#
# EventManager = EventManager()
# # –ë—É—Ñ–µ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–º —Å–æ–±—ã—Ç–∏–∏
# # –Ω–∞ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
# call_buffer = ''
#
#
# def eat_btn_on_click(message):
#     record = EventManager.save_event(EventModel("eat"))
#     markup = types.InlineKeyboardMarkup()
#     markup.row_width = 2
#
#     markup.add(get_value_btn(record.id))
#     markup.add(get_comment_btn(record.id))
#     markup.add(get_remove_btn(record.id))
#
#     bot.reply_to(message, text=record, reply_markup=markup)
#
#
# def sleep_btn_on_click(message):
#     record = EventManager.save_event(EventModel("sleep"))
#     markup = types.InlineKeyboardMarkup()
#     markup.row_width = 2
#
#     markup.add(get_end_time_btn(record.id))
#     markup.add(get_comment_btn(record.id))
#     markup.add(get_remove_btn(record.id))
#
#     bot.reply_to(message, text=f"""{record}\n
#         –ü–æ—Ä–∞ –≥–æ—Ç–æ–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–∏–µ–º –ø–∏—â–∏ ;)
#         –ë—É—Ç—ã–ª–æ—á–∫–∞ —á–∏—Å—Ç–∞—è? –∞ –≤–æ–¥—ã –∫–∏–ø—è—á–µ–Ω–æ–π —Ö–≤–∞—Ç–∞–µ—Ç?""", reply_markup=markup)
#
#
# def walk_btn_on_click(message):
#     record = EventManager.save_event(EventModel("walk"))
#     markup = types.InlineKeyboardMarkup()
#     markup.row_width = 2
#
#     markup.add(get_end_time_btn(record.id))
#     markup.add(get_comment_btn(record.id))
#     markup.add(get_remove_btn(record.id))
#
#     bot.reply_to(message, text=f"""{record}\n
#         –•–æ—Ä–æ—à–µ–π –ø—Ä–æ–≥—É–ª–∫–∏!
#         –ú–æ–∂–µ—Ç –≤ –±—É–¥—É—â–µ–º —è –Ω–∞—É—á—É—Å—å —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã?""", reply_markup=markup)
#
#
# def shit_btn_on_click(message):
#     record = EventManager.save_event(EventModel("shit"))
#
#     markup = types.InlineKeyboardMarkup()
#     markup.row_width = 2
#
#     markup.add(get_remove_btn(record.id))
#     bot.reply_to(message, text=f"""{record}\n
#         –≠—Ç–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ —É—Å–ø–µ—Ö!""", reply_markup=markup)
#
#
# def bath_btn_on_click(message):
#     record = EventManager.save_event(EventModel("bath"))
#
#     markup = types.InlineKeyboardMarkup()
#     markup.row_width = 2
#
#     markup.add(get_remove_btn(record.id))
#     bot.reply_to(message, text=f"""{record}\n
#         –° –ª–µ–≥–∫–∏–º –ø–∞—Ä–æ–º!""", reply_markup=markup)
#
#
# def stat_btn_on_click(message):
#     markup = types.InlineKeyboardMarkup()
#     markup.row_width = 3
#
#     markup.add(types.InlineKeyboardButton("–ö–∞–∫ –¥–∞–≤–Ω–æ –∫—É—à–∞–ª–∏?", callback_data='statistic,how-long-ago,,eat'))
#     markup.add(types.InlineKeyboardButton("–°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –ø–æ–∫–∞–∫–∞–ª–∏?", callback_data='statistic,how-many,today,shit'))
#     markup.add(types.InlineKeyboardButton("–°–∫–æ–ª—å–∫–æ —Å—ä–µ–ª–∏ —Å–µ–≥–æ–¥–Ω—è?", callback_data='statistic,how-much,today,eat'))
#     markup.add(types.InlineKeyboardButton("–í—á–µ—Ä–∞ –∫—É–ø–∞–ª–∏—Å—å?", callback_data='statistic,have,yesterday,bath'))
#     markup.add(types.InlineKeyboardButton("–ì—Ä–∞—Ñ–∏–∫ –µ–¥—ã", callback_data='graphic,eat'))
#
#     bot.reply_to(message, text='–ß—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?', reply_markup=markup)
#
#
# def update_event_record(message):
#     global call_buffer
#     record_id, field_name = call_buffer.data.split(',')
#
#     if field_name == 'value':
#         value = int(message.text)  # todo: –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
#     elif field_name == 'comment':
#         value = message.text
#     elif field_name == 'end_time':
#         value = datetime.datetime.now()
#     else:
#         raise Exception('–ü–æ–ª—É—á–µ–Ω–æ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ value –¥–ª—è —Å–æ–±—ã—Ç–∏—è')
#
#     upd_event = EventManager.update_event(record_id, {field_name: value})
#     bot.answer_callback_query(call_buffer.id, '–°–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ')
#     bot.edit_message_text(upd_event, chat_id=call_buffer.message.chat.id, message_id=call_buffer.message.id,
#                           reply_markup=call_buffer.message.reply_markup)
#
#     call_buffer = ''
#
#
# def remove_event(call):
#     global call_buffer
#     record_id, _ = call_buffer.data.split(',')
#
#     EventManager.remove_event(record_id)
#     call_buffer = ''
#
#     bot.answer_callback_query(call.id, "–°–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ!", show_alert=True)
#     bot.delete_message(call.message.chat.id, call.message.id)
#
#
# def get_value_btn(record_id):
#     return types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –æ–±—ä–µ–º", callback_data=f"{record_id},value")
#
#
# def get_comment_btn(record_id):
#     return types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data=f"{record_id},comment")
#
#
# def get_end_time_btn(record_id):
#     return types.InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"{record_id},end_time")
#
#
# def get_remove_btn(record_id):
#     return types.InlineKeyboardButton("‚ùå", callback_data=f"{record_id},remove")
#
#
# def get_statistic(call_back):
#     if 'statistic' in call_back.data:
#         answer = statistic(call_back.data)
#
#         if answer is None:
#             answer = '–ù–µ –∑–Ω–∞—é ;('
#
#         bot.send_message(call_back.message.chat.id, answer)
#
#
# def get_graph(call_back):
#     if 'graphic' in call_back.data:
#         pic_path = get_eat_graphic()
#         bot.send_photo(call_back.message.chat.id, open(pic_path, 'rb'))
#
#         os.remove(pic_path)
#
#
# keyboard_mapper = {
#     EAT_BTN: eat_btn_on_click,
#     SLEEP_BTN: sleep_btn_on_click,
#     WALK_BTN: walk_btn_on_click,
#     SHIT_BTN: shit_btn_on_click,
#     STAT_BTN: stat_btn_on_click,
#     BATH_BTN: bath_btn_on_click
# }
#
#
# def eat_time_switcher(time: str) -> str:
#     assert type(time) is str
#     regexp = r"(\d{1,2}):(\d{1,2}):(\d{1,2})"
#     assert re.fullmatch(regexp, time) is not None
#
#     h, m, s = re.findall(regexp, time)[0]
#     m = int(h) * 60 + int(m) + int(s) / 60
#
#     return {
#         m < 60: 'üôÇ',
#         60 <= m < 90: 'ü§î',
#         90 <= m < 120: 'üòï',
#         120 <= m < 180: 'üò°',
#         180 <= m: 'ü§¨'
#     }[True]
#

@bot.message_handler(commands=['start'])
def on_start(message):
    controller = MessageController(message, bot)
    controller.set_strategy(StartCommandStrategy)
    controller.send_answer()


@bot.message_handler(commands=['help'])
def on_help(message):
    controller = MessageController(message, bot)
    controller.set_strategy(HelpCommandStrategy)
    controller.send_answer()


@bot.message_handler(commands=['events'])
def send_events(message):
    controller = MessageController(message, bot)
    controller.set_strategy(EventsCommandStrategy)
    controller.send_answer()


@bot.message_handler(commands=['pin'])
def upd_pin_eat(message):
    controller = MessageController(message, bot)
    controller.set_strategy(PinCommandStrategy)
    controller.send_answer()

#
#
# @bot.callback_query_handler(func=lambda call: True)
# def callback_query(call):
#     global call_buffer
#     call_buffer = call
#     if 'value' in call.data or 'comment' in call.data:
#         send = bot.send_message(text=f"–ü–∏—à–∏ {'–æ–±—ä–µ–º –≤ –º–ª.' if 'value' in call.data else '–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'}",
#                                 chat_id=call.message.chat.id)
#         bot.register_next_step_handler(send, update_event_record)
#     elif 'remove' in call.data:
#         remove_event(call)
#     elif 'end_time' in call.data:
#         update_event_record(call.message)
#     elif 'statistic' in call.data:
#         get_statistic(call)
#     elif 'graphic' in call.data:
#         get_graph(call)
#     elif 'event_from_str' in call.data:
#         add_event_from_str_continue(call=call)
#
#
# @bot.message_handler(func=lambda message: is_masters_message(message) and keyboard_mapper.get(message.text) is not None)
# def keyboard_btn(message):
#     keyboard_mapper[message.text](message)
#
#
# @bot.message_handler(regexp=r"(–µ–¥–∞|–ø—Ä–æ–≥—É–ª–∫–∞|–∫—É–ø–∞–Ω–∏–µ|–ø–æ–∫–∞–∫–∞–ª–∏|—Å–æ–Ω)?\s\d{1,2}(-|:|;)\d{1,2}?\s\d{1,4}")
# def add_event_from_str(message):
#     rx = re.compile(r"(–µ–¥–∞|–ø—Ä–æ–≥—É–ª–∫–∞|–∫—É–ø–∞–Ω–∏–µ|–ø–æ–∫–∞–∫–∞–ª–∏|—Å–æ–Ω)?\s(\d{1,2}([-:;])\d{1,2})?\s(\d{1,4})", flags=re.IGNORECASE)
#     action, time, _, value = rx.findall(message.text)[0]
#
#     h, _, m = re.findall(r"(\d{1,2})([-:;])(\d{1,2})", time)[0]
#     h = int(h)
#     m = int(m)
#
#     if h > 23 or m > 59:
#         bot.reply_to(message, "–ü–æ–ª—É—á–µ–Ω–æ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –≤—Ä–µ–º—è. –ù–µ –º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ")
#         return
#
#     current_time = datetime.datetime.now()
#     time = f"{h}:{m}"
#
#     if current_time.hour * 60 + current_time.minute < h * 60 + m:
#         text = f'–ü–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è {time} –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ {current_time.strftime("%H:%M")}' \
#                f'\n–í—ã–±–µ—Ä–∏, —á—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ:'
#
#         markup = types.InlineKeyboardMarkup()
#         markup.row_width = 2
#
#         time = current_time.replace(hour=h, minute=m, second=0, microsecond=0)
#         time = time - datetime.timedelta(days=1)
#
#         markup.add(types.InlineKeyboardButton("‚è∞ –í–Ω–µ—Å—Ç–∏ –≤—á–µ—Ä–∞—à–Ω–µ–π –¥–∞—Ç–æ–π",
#                                               callback_data=f"event_from_str,{action},{time},{value}"))
#         markup.add(types.InlineKeyboardButton("‚ùå –≠—Ç–æ –æ—à–∏–±–∫–∞. –ó–∞–±—É–¥—å", callback_data=f"event_from_str,error"))
#
#         bot.reply_to(message, text, reply_markup=markup)
#         return
#
#     add_event_from_str_continue(message=message, action=action, time=time, value=value)
#
#
# def add_event_from_str_continue(**kwargs) -> None:
#     if 'call' in kwargs:
#         call = kwargs['call']
#
#         if 'error' in call.data:
#             bot.answer_callback_query(call.id, "–°–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ!", show_alert=True)
#             bot.delete_message(call.message.chat.id, call.message.id)
#             return
#         else:
#             _, action, time, value = call.data.split(',')
#             time = datetime.datetime.strptime(time, '%Y-%m-%d %H:%M:%S')
#             message = call.message
#
#             bot.delete_message(call.message.chat.id, call.message.id)
#     else:
#         action = kwargs['action']
#         time = kwargs['time']
#         value = kwargs['value']
#         message = kwargs['message']
#
#     event = EventManager.create_event(action, time, value)
#
#     markup = types.InlineKeyboardMarkup()
#     markup.row_width = 2
#
#     markup.add(get_remove_btn(event.id))
#
#     bot.send_message(message.chat.id, f"‚úÖ  –°–æ–∑–¥–∞–ª —Å–æ–±—ã—Ç–∏–µ {event}", reply_markup=markup)
